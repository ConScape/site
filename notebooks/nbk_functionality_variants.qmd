---
title: "Functional habitat"
bibliography: biblio.bib
---

::: {.callout-tip}
## Here you will learn

Different ways to compute the amount of connected habitat for a pixel/cell or functional habitat in ConScape.
:::

# Demonstration of functional habitat computation

In this notebook we demonstrate the different ways the amount of connected habitat or `habitat functionality' can be computed with ConScape.

## Data import, `Grid` and `GridRSP` creation

See notebook [Getting Started](/notebooks/nbk_getting_started.qmd) for a 'basic workflow' to learn about the fundamentals on data import and the creation of a ConScape `Grid`:

```{julia}
#using Pkg
#Pkg.activate(joinpath(ENV["HOME"], ".julia", "dev", "ConScape"))

using ConScape
using SparseArrays
using Statistics
using Plots
```

```{julia}
#| echo: true
#| eval: false

datadir = joinpath(ENV["HOME"], "Downloads", "input_maps")
outdir = joinpath(ENV["TMPDIR"], "figures")
if !isdir(outdir)
    mkdir(outdir)
end
```
```{julia}
#| echo: false
#| eval: true

datadir = "C:/Users/bram.van.moorter/Documents/ConScape_website/site/notebooks/data/"
```

```{julia}
mov_prob, meta_p = ConScape.readasc(joinpath(datadir, "mov_prob_1000.asc"))
hab_qual, meta_q = ConScape.readasc(joinpath(datadir, "hab_qual_1000.asc"));
```

```{julia}
non_matches = findall(xor.(isnan.(mov_prob), isnan.(hab_qual)))
mov_prob[non_matches] .= 1e-20
hab_qual[non_matches] .= 1e-20;
```

```{julia}
θ = 1.0
adjacency_matrix = ConScape.graph_matrix_from_raster(mov_prob)
g = ConScape.Grid(size(mov_prob)...,
    affinities=adjacency_matrix,
    qualities=hab_qual,
    costs=ConScape.mapnz(x -> -log(x), adjacency_matrix))
h = ConScape.GridRSP(g, θ = θ);
```


## Habitat functionality: introduction

We have defined the functionality of habitat as its suitability and its functional connectivity to suitable habitat, which has its background in metapopulation theory ([@hanski1999metapopulation],[@hanski2000metapopulation]). Hanski and co-workers developed several of such metrics for patch-matrix representations of the landscape. In ConScape these different metrics are computed for continuous grid-based landscape representations. In the following we show the computation of the functionality of a pixel based: (1) on the RSP expected cost between source and target pixels and on the summation over sources or targets, (2) on eigenanalysis instead of summation, (3) on the survival probability instead of the RSP expected cost, (4) on the least-cost distance instead of the RSP expected cost. This last version corresponds to the popular 'probability of connectivity' ([@saura2007new]).  

## Functionality: RSP expected cost with summation

Before demonstrating the convenience function ConScape has to computate the amount of connected habitat, we will demonstrate explicitly the main building blocks going into this computation.

First, we need extract the vectors with the qualities $s$ of the pixels as source $s$ and target $t$:
```{julia}
targetidx, targetnodes = ConScape._targetidx_and_nodes(h.g)
qˢ = [h.g.source_qualities[i] for i in h.g.id_to_grid_coordinate_list]
qᵗ = [h.g.target_qualities[i] for i in targetidx];
```

Then, we compute the proximity matrix between $s$ and $t$ using the RSP expected cost:
```{julia}
K = map(t -> iszero(t) ? t : exp(-t/2000), ConScape.expected_cost(h));
```
See Notebook [ecological distance](/notebooks/nbk_distance_metrics.qmd) for a discussion of the proximity computation.


From the these quality vectors $q^s$ and $q^t$, and the proximity matrix $\mathbf{K}$ we compute the 'landscape matrix' $\mathbf{M}$:  
```{julia}
M = qˢ .* K .* qᵗ';
```

The landscape matrix $\mathbf{M}$ can be summarized either through summation or Eigenanalysis, both can be used to quantify the functionality of a pixel as a source or as a target. The next section demonstrates Eigenanalysis, we first look at summation to summarize $\mathbf{M}$. By summing over all rows, we get how well suitable target habitat is connected to suitable sources:
```{julia}
#| label: fig-target_functionality
#| fig-cap: Habitat functionality of each pixel as a target (i.e. in receiving suitable habitat from sources).

funcᵗ = vec(sum(M, dims=1)); #sum over rows
ConScape.plot_values(g, funcᵗ, title="Functional habitat", color=cgrad(:viridis))
```

Similarly, by summing over all columns, we quantify how well suitable source habitat is connected to suitable target habitat:
```{julia}
#| fig-cap: Habitat functionality of each pixel as a source (i.e. in contributing suitable habitat to targets).

funcˢ = vec(sum(M, dims=2)); #sum over columns
ConScape.plot_values(g, funcˢ, title="Functional habitat", color=cgrad(:viridis))
```

We could then multiply the functionality of a pixel as a source and as a target to identify pixels that are simultaneously functional as source and target.
```{julia}
func_tot = funcˢ .* funcᵗ;
```

Note that this last computation is only possible, if func$^s$ and func$^t$ are of the same length. In other words, the the target qualities cannot be represented as a sparse matrix (see Van Moorter et al. 2022 and Notebook [performance](/notebooks/nbk_landmarks.qmd)
 for more details).

ConScape's convenience function focuses on the 'source functionality' to allow for the usage of the sparse matrix representation of target qualities, which allows the computation of these metrics on even larger landscapes (see Notebook [performance](/notebooks/nbk_landmarks.qmd)
 for explanation):
```{julia}
#| fig-cap: Habitat functionality of each pixel as a target using ConScape's convenience function.

func = ConScape.connected_habitat(h, connectivity_function=
    ConScape.expected_cost, distance_transformation=x -> exp(-x/2000));
ConScape.heatmap(func, yflip=true, color=cgrad(:viridis), title="Functional habitat")
```
is identical to the one in Fig. [@fig-target_functionality].

## Functionality: RSP expected cost with eigenanalysis

In addition to summarizing the landscape matrix $\mathbf{M}$ through summation, we can also use Eigenanalysis:
```{julia}
vˡ, λ, vʳ= ConScape.eigmax(h, connectivity_function=
    ConScape.expected_cost, distance_transformation=x -> exp(-x/2000))

vʳ = real.(vʳ)
vˡ = real.(vˡ);
```

Where $\lambda$ corresponds to the 'metapopulation capacity' in metapopulation ecology ([@hanski2000metapopulation]):
```{julia}
λ
```

The interpretation of this value outside the context of metapopulation theory still needs to be addressed in future research.

The right Eigenvector corresponds to the reproductive value, which is analogous to the functionality as a source: 
```{julia}
#| fig-cap: Habitat functionality based on eigenanalysis of each pixel as a target (i.e. the reproductive value).

ConScape.plot_values(g, vʳ, title="Reproductive value", color=cgrad(:viridis))
```
Note that the landscape matrix $\mathbf{M}^{st}$ is transposed compared to (e.g. [@ovaskainen2003much]) and therefore the right and left Eigenvectors switched interpretation.

The left Eigenvector then corresponds to the stable distribution, which is somewhat analogous to the functionality as a target:
```{julia}
#| fig-cap: Habitat functionality based on eigenanalysis of each pixel as a source (i.e. the stable distribution).

ConScape.plot_values(g, vˡ, title="Stable distribution", color=cgrad(:viridis))
```

Just as [@ovaskainen2003habitat] we can multiply the left and right Eigenvectors:
```{julia}
eigenvec = vˡ .* vʳ;
```

An important note, Eigenanalysis requires the landscape matrix $\mathbf{M}^{st}$ to be square, hence the sparse matrix representation of the target qualities is not possible (see main text and Notebook [performance](/notebooks/nbk_landmarks.qmd) for more details). Hence, we cannot rely on the 'landmark' approach to reduce the computational demands, which currently limits this type of eigenanalysis to relatively coarse landscape representations. 

## Functionality: survival probability with summation

See also Notebook [ecological distance](/notebooks/nbk_distance_metrics.qmd) for more details on the different distance and proximity metrics that can be used. We now demonstrate the use of the survival probability as an alternative metric to compute the amount of suitable target habitat that is functionally connected to a suitable source pixel:
```{julia}
#| fig-cap: Habitat functionality based on survival probability.

func_surv = ConScape.connected_habitat(h,
        connectivity_function=ConScape.survival_probability);
ConScape.heatmap(func_surv, yflip=true, title="Habitat functionality", color=cgrad(:viridis))
```
See Notebook [dispersal mortality](/notebooks/nbk_cost.qmd) for more details on the use of mortality data as the basis for survival connectivity.


## Functionality: least-cost distance with summation

Our final demonstration to quantify the amount of connected habitat is related to the 'probability of connectivity' [@saura2007new] and the 'cost-benefit analysis' ([@drielsma2007raster],[@drielsma2007spatial]). These approaches both are built from the least-cost distance between source and target pixels. Although the RSP expected cost in theory includes the least-cost distance for $\theta \rightarrow \infty$, it is not an efficient algorithm to use for least-cost based distances. We therefore implemented convenience functions to use Julia's implementation of the Dijkstra algorithm to compute the least-cost distance:
```{julia}
func_lc = ConScape.connected_habitat(g, connectivity_function=
    ConScape.least_cost_distance, distance_transformation=x -> exp(-x/40));
```

The 'connectivity of a landscape' from ([@drielsma2007spatial]) is then the sum of all elements in the landscape matrix $\mathbf{M}^{st}$:
```{julia}
CL=sum(filter(x -> !isnan(x), func_lc))
```


And the 'probability of connectivity' further divides this 'connectivity of the landscape' by the squared area of the landscape ([@saura2007new]):
```{julia}
PC=CL/sum(map(x -> isnan(x) ? 0 : 1, func_lc))^2
```

In addition, as above we can compute the source and target functionalities using the least-cost distance by respectively summing over all columns or all rows of the landscape matrix $\mathbf{M}^{st}$, this corresponds to the colonization potential in [@drielsma2007raster]: 
```{julia}
#| fig-cap: Habitat functionality based on the least-cost distance, which corresponds to the 'colonization potential' in [@drielsma2007raster].

ConScape.heatmap(func_lc, yflip=true, title="Colonization potential", color=cgrad(:viridis))
```

## Summary

ConScape allows for several different 'habitat functionality' metrics by combining different distance or proximity metrics to quantify the connectivity between sources and targets with different ways of summarizing across sources and/or targets. Theoretically, the RSP expected cost is a generalized version of the least-cost distance (i.e. RSP expected cost equals the least-cost distance for $\theta \rightarrow \infty$), although numerical issues with the current algorithms prevent the usage of the RSP expected cost to replace the least-cost distance in actual applications. In addition to the RSP expected cost (and least-cost distance), ConScape also offers the survival probability to quantify the connectivity between source and target pixels. Two summary statistics have been proposed to quantify habitat functionality: summation and eigenanalysis. Summation was first proposed in [@hanski1999metapopulation] with the 'neighborhood habitat area index', whereas [@hanski2000metapopulation] proposed eigenanalysis to quantify the 'metapopulation capacity' for metapopulation persistence. Both of these approaches have been implemented in ConScape, however, the computational requirements for eigenanalysis may prevent this approach on large landscapes.  

