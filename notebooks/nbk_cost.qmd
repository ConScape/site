---
title: "Dispersal mortality"
bibliography: biblio.bib
---

::: {.callout-tip}
## Here you will learn

In this notebook, we demonstrate the possibility to use independent movement probablities and costs, similar to [@fletcher2019towards] and [@marx2020samc].  
:::

# Demonstration of independent likelihood and cost of movement


In this notebook, we demonstrate the possibility to use independent movement probablities and costs, similar to [@fletcher2019towards] and [@marx2020samc].  


## Preamble

See notebook [Getting Started](/notebooks/nbk_getting_started.qmd) for a 'basic workflow' to learn about the fundamentals on data import and the creation of a ConScape `Grid`:

```{julia}
#using Pkg
#Pkg.activate(joinpath(ENV["HOME"], ".julia", "dev", "ConScape"))

using ConScape
using SparseArrays
using Statistics
using Plots
```

```{julia}
#| echo: true
#| eval: false

datadir = joinpath(ENV["HOME"], "Downloads", "input_maps")
outdir = joinpath(ENV["TMPDIR"], "figures")
if !isdir(outdir)
    mkdir(outdir)
end
```
```{julia}
#| echo: false
#| eval: true

datadir = "C:/Users/bram.van.moorter/Documents/ConScape_website/site/notebooks/data/"
```

We use the data provided in [@marx2020samc]:

```{julia}
mov_prob, meta_p = ConScape.readasc(joinpath(datadir, 
            "prob_panther_cropped.asc"))
hab_qual, meta_q = ConScape.readasc(joinpath(datadir, 
            "prob_panther_cropped.asc"))
```

Note, we did not have quality data for each pixel, for this demonstration we simply assumed that the permeability adequately represents quality (see Notebook [Getting Started](/notebooks/nbk_getting_started.qmd) for a better example with independent quality data).

We remove negative values:
```{julia}
mov_prob = max.(0, mov_prob)
hab_qual = max.(0, hab_qual);
```

## Cost data

In addition to the data on the habitat quality and the likelihood of movement, we also have independent data on the cost of movement ([@marx2020samc]):
```{julia}
mov_cost, meta_c = ConScape.readasc(joinpath(datadir, 
            "mort_panther_cropped.asc"))
mov_cost = max.(0, mov_cost);
```

As discussed in vanmoorter2021defining, to use the mortality risk as a cost in the RSP framework, we need to define the cost as the negative logarithm of the survival probability between adjacent pixels: 
```{julia}
mov_cost = -log.(1 .- mov_cost);
```

We create the `Grid` by using these cost data, instead of a transformation from the likelihood of movement:
```{julia}
g = ConScape.Grid(size(mov_prob)...,
    affinities=ConScape.graph_matrix_from_raster(mov_prob),
    qualities=hab_qual,
    costs=ConScape.graph_matrix_from_raster(mov_cost));
```

To visualize the movement costs, we define the following function, similar to the `plot_indegrees` function we used earlier (see Notebook [Getting Started](/notebooks/nbk_getting_started.qmd)):
```{julia}
function plot_incost(g; kwargs...)
    values = sum(g.costmatrix, dims=1)
    canvas = zeros(g.nrows, g.ncols)
    for (i,v) in enumerate(values)
        canvas[g.id_to_grid_coordinate_list[i]] = v
    end
    heatmap(canvas, yflip=true, axis=nothing, border=:none; kwargs...)
end
```

```{julia}
plot_incost(g, title="Mortality risk")
```

## Computing the survival probability

Now we can compute the `GridRSP`:
```{julia}
h = ConScape.GridRSP(g, Î¸=1.0);
```
Note that to compute the survival probability from $s$ to $t$ corresponding to the mortality cost associated to edges $(i,j)$, we need to set $\theta=1.0$ ([@vanmoorter2021defining]).

The survival probability from all source pixels to a target pixel (e.g. 15000) is:
```{julia}
#| fig-cap: Survival probability to a target.
#| fig-subcap: 
#|   - "a"
#|   - "b"
#| layout-ncol: 2

tmp = zeros(17212)
tmp[15000] = 1

display(ConScape.plot_values(g, tmp, title="Target"))

surv = ConScape.survival_probability(h);
display(ConScape.plot_values(g, map(t -> t==1 ? NaN : t,  surv[:,15000]), title="Survival probability"))
```


Finally, we can use these survival probabilities to compute for each pixel the amount of habitat it is functionally connected to:
```{julia}
#| fig-cap: Amount of connected habitat based on survival connectivity.

func = ConScape.connected_habitat(h, 
            connectivity_function=ConScape.survival_probability);
ConScape.heatmap(Array(func), yflip=true, title="Functional habitat")
```

## Summary

The ConScape library allows users to define the cost of movement between adjacent pixels both as a transformation from the likelihood of movement, but also from independent cost data. This application is very useful to model dispersal with mortality ([@fletcher2019towards]), but could also be applied in combination with 'energy landscapes' discussed in: [@vanmoorter2021defining]. 

